# -*- coding: utf-8 -*-
"""new pest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fH-zMa36wJ6NjVCDu6NDGDq4JWVk-CNE
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np

import zipfile
! unzip /content/drive/MyDrive/Test.zip

image_size = (180,180)
batch_size = 32

train = tf.keras.preprocessing.image_dataset_from_directory(
    "Test",
    validation_split = 0.2,
    subset = "training",
    seed = 1337,
    image_size = image_size,
    batch_size = batch_size,
)

test = tf.keras.preprocessing.image_dataset_from_directory(
    "Test",
    validation_split = 0.2,
    subset = "validation",
    seed = 1337,
    image_size = image_size,
    batch_size = batch_size,
)

classes =["Flea Beetle","Mole Cricket","Rice Gall Midge","Thrips","Aphids","Armyworm","Grasshopper","Stem Borer"]

import matplotlib.pyplot as plt
plt.figure(figsize=(10,10))
for images, label in train.take(8):
  for i in range(9):
    ax = plt.subplot(3,3,i+1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(int(label[i]))
    plt.axis("off")

data_aug = keras.Sequential(
    [
        layers.experimental.preprocessing.RandomFlip('horizontal'),
        layers.experimental.preprocessing.RandomRotation(0.1),
    ]
)

plt.figure(figsize=(10,10))
for images, _ in train.take(1):
  for i in range(9):
    aug_images = data_aug(images)
    ax = plt.subplot(3,3,i+1)
    plt.imshow(aug_images[3].numpy().astype("uint8"))
    plt.title(int(label[i]))
    plt.axis("off")

aug_train = train.map(
    lambda x,y: (data_aug(x, training= True),y)
)

train = train.prefetch(buffer_size= 32)
test = test.prefetch(buffer_size = 32)

def make_model(input_shape, num_classes):
    inputs = keras.Input(shape=input_shape)
    # Image augmentation block
    x = data_aug(inputs)

     # Entry block
    x = layers.Rescaling(1.0 / 255)(x)
    x = layers.Conv2D(32, 3, strides=2, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    x = layers.Conv2D(64, 3, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    previous_block_activation = x  # Set aside residual

    for size in [128, 256, 512, 728]:
      x = layers.Activation("relu")(x)
      x = layers.SeparableConv2D(size, 3, padding="same")(x)
      x = layers.BatchNormalization()(x)

      x = layers.Activation("relu")(x)
      x = layers.SeparableConv2D(size, 3, padding="same")(x)
      x = layers.BatchNormalization()(x)

      x = layers.MaxPooling2D(3, strides=2, padding="same")(x)

      # Project residual
      residual = layers.Conv2D(size, 1, strides=2, padding="same")(
          previous_block_activation
      )
      x = layers.add([x, residual])  # Add back residual
      previous_block_activation = x  # Set aside next residual


    x = layers.SeparableConv2D(1024, 3, padding="same")(x)
    x = layers.BatchNormalization()(x)
    x = layers.Activation("relu")(x)

    x = layers.GlobalAveragePooling2D()(x)
    print(num_classes)
    if num_classes == 8:
        activation = "softmax"
        units = 7
    elif num_classes == 7:
        activation = "softmax"
        units=6
    elif num_classes == 6:
        activation = "softmax"
        units=5
    elif num_classes == 5:
        activation = "softmax"
        units=4
    elif num_classes == 4:
        activation = "softmax"
        units=3
    elif num_classes == 3:
        activation = "softmax"
        units=2       
    elif num_classes == 2:
        activation = "sigmoid"
        units=1               
    else:
        activation = "softmax"
        units = num_classes

    x = layers.Dropout(0.5)(x)
    outputs = layers.Dense(units+1, activation=activation)(x)
    return keras.Model(inputs, outputs)


model = make_model(input_shape=image_size + (3,), num_classes=8)
keras.utils.plot_model(model, show_shapes=True)

# epochs = 5

callbacks = [
    keras.callbacks.ModelCheckpoint("save_at_{epoch}.h5"),
]
model.compile(
    optimizer=keras.optimizers.Adam(1e-3),
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy"],
)
model.fit(
    x = train, epochs=40, callbacks=callbacks, validation_data=test,
)

# Commented out IPython magic to ensure Python compatibility.
img = keras.preprocessing.image.load_img(
    "/content/Test/Rice Gall Midge/03963.jpg", target_size=image_size
)
img_array = keras.preprocessing.image.img_to_array(img)
img_array = tf.expand_dims(img_array, 0)  # Create batch axis

predictions = model.predict(img_array)
score = predictions[0]
print(
      "This image is %.2f percent aphids and %.2f armyworm."
#       % (100 * (1 - score), 100 * score)
)